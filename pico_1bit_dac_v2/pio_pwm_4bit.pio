; pio pwm 4bit version
; Ver.0.2 : Change FIFO-Empty Logic (pull-if-empty -> jmp !osre)
; 
;[PWM Specification]
;   PIN_FS48        : 1           (0)          
;   -------------------------------------------
;   PIO clock[MHz]  : 208.8       (208.8)      ; common clock
;   PWM cycle[clk]  : 68          (74)         
;   PWM carrier[MHz]: 3.070588    (2.821622)   
;   Error[MHz/ppm]  : 3.072/-459  (2.8224/-275)
;
;[PIO FIFO input data format]
; bit          31   28 27   24 23   20 19   16 15   12 11   08 07   04 03   00
;             +-------+-------+-------+-------+-------+-------+-------+-------+
;  4 x 4-bit  |  N/A  |  N/A  |  N/A  |  N/A  | DATA3 | DATA2 | DATA1 | DATA0 |
;  PWM Data   +-------+-------+-------+-------+-------+-------+-------+-------+
;                                              <-New                     Old->
;  DATAn : 0~31, Center: 15
;
;[PWM Output Pattern]
;4bit PWM "Triangle-Wave Modulation" Version :
; clk 1            15             30   35        45             60  64  68    
;    (1)          (15)           (30) (41)      (51)           (66)(70)(74)   
;DATAn:             :              :    :         :                  :   :   H:L  ( H:L )
; 15  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~____~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  64:04 (67:07)
; 14  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  60:08 (63:11)
; 13  ~~~~~~~~~~~~~~~~~~~~~~~~~~____________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  56:12 (59:15)
; 12  ~~~~~~~~~~~~~~~~~~~~~~~~________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~  52:16 (55:19)
; 11  ~~~~~~~~~~~~~~~~~~~~~~____________________~~~~~~~~~~~~~~~~~~~~~~~~~~  48:20 (51:23)
; 10  ~~~~~hi1_loop~~~~~~~________lo_loop_________~~~~~~hi2_loop~~~~~~~~~~  44:24 (47:27)
; 09  ~~~~~~~~~~~~~~~~~~____________________________~~~~~~~~~~~~~~~~~~~~~~  40:28 (43:31)
; 08  ~~~~~~~~~~~~~~~~________________________________~~~~~~~~~~~~~~~~~~~~  36:32 (39:35)
;osre ~~~~~~~~~~~~~~__________________________________~~~~~~~~~~~~~~~~~~~~  34:34 (37:37) <- fifo_Empty (Center Level)
; 07  ~~~~~~~~~~~~~~____________________________________~~~~~~~~~~~~~~~~~~  32:36 (35:39)
; 06  ~~~~~~~~~~~~________________________________________~~~~~~~~~~~~~~~~  28:40 (31:43)
; 05  ~~~~~~~~~~____________________________________________~~~~~~~~~~~~~~  24:44 (27:47)
; 04  ~~~~~~~~________________________________________________~~~~~~~~~~~~  20:48 (23:51)
; 03  ~~~~~~____________________________________________________~~~~~~~~~~  16:52 (19:55)
; 02  ~~~~________________________________________________________~~~~~~~~  12:56 (15:59)
; 01  ~~____________________________________________________________~~~~~~  08:60 (11:63)
; 00  ____________________________eq0_loop____________________________~~~~  04:64 (07:67)

.program pio_pwm_4bit
.side_set 2
lo_dec:
	jmp y-- lo_loop			side 2	[2]	;--,33,35,37,39,41,43,45,47,49,51,53,55,57,59,--
hi1:
	mov y x					side 1		;68
hi1_loop:
	jmp y-- hi1_loop		side 1	[1]	;30,28,26,24,22,20,18,16,14,12,10,08,06,04,02,--
lo_loop_set:
	set y 14				side 2		;31,29,27,25,23,21,19,17,15,13,11,09,07,05,03,--	
lo_loop:
	jmp x!=y lo_dec			side 2		;32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,--
	jmp pin hi2_loop		side 2	[1]	;34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,--
	nop						side 2	[2]	;--(+3)
	nop						side 1	[2]	;--(+3)
hi2_loop:
	jmp y-- hi2_loop		side 1	[1]	;64(70)
public entry_point:
check_fifo:
	jmp !osre get_data		side 1		;65(71)
fifo_empty:
	set x 7					side 1	[2]	;68
	nop						side 1	[6]	; 7
	nop						side 1	[6]	;14
	jmp	lo_loop_set			side 2	[1] ;16
get_data:
	out x 4					side 1		;66(72)
	jmp x-- hi1				side 1		;67(73)
eq0:
	set y 30				side 1		;68(74)
eq0_loop:
	jmp y-- eq0_loop		side 2	[1]	;62
	jmp pin check_fifo		side 2	[1]	;64
	nop						side 2	[2]	;--(67)
	jmp check_fifo			side 1	[2]	;--(70)

% c-sdk {
#include "hardware/clocks.h"
static inline void pio_pwm_program_init(PIO pio, uint pin_output_lp, uint pin_output_rp, uint pin_fs48) {
	gpio_init(pin_fs48);
	gpio_set_dir(pin_fs48, GPIO_OUT);
	gpio_put(pin_fs48, 0);	// PIN_FS48=L(Default:44k)

	pio_clear_instruction_memory(pio);

	uint offset = pio_add_program(pio, &pio_pwm_4bit_program);	// add pioasm

	for(uint sm = 0; sm < 2; sm++){
		uint pin = (sm == 0) ? pin_output_lp:pin_output_rp;	// sm=0:LP,1:RP
		pio_gpio_init(pio, pin);							// GPIOn   for positive pin
		pio_gpio_init(pio, pin + 1);						// GPIOn+1 for negative pin
		pio_sm_set_consecutive_pindirs(pio,sm,pin,2,true);	// pin_base = pin, pin_count = 2, output 
		pio_sm_config c = pio_pwm_4bit_program_get_default_config(offset);	// get default value
		sm_config_set_out_shift(&c,true ,true , 16);		// osr : shift right,    autopull, thr=16 
		sm_config_set_in_shift(&c, false,false, 16);		// isr : shift left,  no autopush, thr=16
		sm_config_set_sideset_pins(&c, pin);				// for 'side' pins, base=pin_p
		sm_config_set_sideset(&c, 2, false, false);			// use 2-sideset, no msb flag, no direction pin
		sm_config_set_jmp_pin(&c, pin_fs48);				// for jmp pin command
		sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);		// Deeper FIFO as we're not doing any RX
		sm_config_set_clkdiv_int_frac(&c, 1, 0);			// div ratio = 1.0 (no divide, clk = 208.8MHz)
		pio_sm_init(pio, sm, offset, &c);					// sm config & go to the start address
		pio_sm_clear_fifos(pio, sm);						// flush remain fifo audio data(s)
	}
	pio_enable_sm_mask_in_sync(pio, 3);						// synchronized start sm0 & sm1
}
%}
