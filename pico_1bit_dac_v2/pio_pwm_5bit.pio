; pio pwm 5bit version
; Ver.0.1
;
;[PWM Specification]
;   PIN_FS48        : 1           (0)          
;   -------------------------------------------
;   PIO clock[MHz]  : 208.8       (208.8)      ; common clock
;   PWM cycle[clk]  : 68          (74)         
;   PWM carrier[MHz]: 3.070588    (2.821622)   
;   Error[MHz/ppm]  : 3.072/-459  (2.8224/-275)
;
;[PIO FIFO input data format]
; bit         3130 29     25 24     20 19     15 14     10 09     05 04     00
;             +---+---------+---------+---------+---------+---------+---------+
;  4 x 5-bit  |N/A|   N/A   |   N/A   |  DATA3  |  DATA2  |  DATA1  |  DATA0  |
;  PWM Data   +---+---------+---------+---------+---------+---------+---------+
;                                      <-New                             Old->
;  DATAn : 0~31, Center: 15
;
;[PWM Output Pattern]
;5bit PWM "Triangle-Wave Modulation" Version :
; clk 1             16             31 34                            64  68    
;                  (16)           (31)(37)                         (70)(74)
;DATAn:              :              :  :                             :   :   H:L  ( H:L )
; 31  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~___~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  65:03 (68:06)
; 30  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  63:05 (66:08)
; 29  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_______~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  61:07 (64:10)
;  :                                                                 :
; 17  ~~~~~~~~~~~~~~~~~_______________________________~~~~~~~~~~~~~~~~~~~~  37:31 (40:34)
; 16  ~~~~~~~~~~~~~~~~_________________________________~~~~~~~~~~~~~~~~~~~  35:33 (38:36)
;osre ~~~~~~~~~~~~~~~__________________________________~~~~~~~~~~~~~~~~~~~  34:34 (37:37) <-fifo_empty (Center Level)
; 15  ~~~hi1_loop~~~~______________lo_loop______________~~~~~hi2_loop~~~~~  33:35 (36:38)
; 14  ~~~~~~~~~~~~~~_____________________________________~~~~~~~~~~~~~~~~~  31:37 (34:40)
;  :                                                                 :
; 02  ~~_____________________________________________________________~~~~~  07:61 (10:64)
; 01  ~___________________________eq1_loop____________________________~~~~  05:63 (08:66)
; 00  ____________________________eq0_loop_____________________________~~~  03:65 (06:68)

.program pio_pwm_5bit
.side_set 2
lo_dec:
	jmp y-- lo_loop			side 2		;61~34
	jmp check_fifo			side 1		;error
ge2:
	mov y x					side 1		; 1
hi1_loop:
	jmp y-- hi1_loop		side 1		; 2~31
lo_loop_set:
	set y 29				side 2		; 3~32
lo_loop:
	jmp x!=y lo_dec			side 2		;62~33
check_fs:
	jmp pin hi2_loop		side 2		;63~34
	nop						side 2	[2]	;(+3)
	nop						side 1	[2]	;(+3)
hi2_loop:
	jmp y-- hi2_loop		side 1		;64(70)
public entry_point:
check_fifo:
	jmp !osre get_data		side 1		;65(71)
.wrap_target
fifo_empty:
	nop						side 1	[7]	; 5
	set x 14				side 1	[7]	;13
	nop						side 1	[1]	;15
	jmp lo_loop_set			side 2		;16 x=14(data=16)でlo_loopに突入
get_data:
	out x 5					side 1		;66(72)
	jmp x-- ge1				side 1		;67(73)
eq0:
	set y 8					side 1		;68
eq0_loop:
	jmp y-- eq0_loop		side 2	[6]	;63=1+(8+1)*(1+[6])
	jmp pin eq0_check_fifo	side 2		;64
	nop						side 2	[3]	;--(68)
	jmp check_fifo			side 1	[1]	;--(70)
eq0_check_fifo:
	jmp !osre get_data		side 2		;65
eq0_fifo_empty:
.wrap
ge1:
	jmp x-- ge2				side 1		;68(74)	if (data > 1) goto ge2(great_equal_2)
eq1:
	set y 30				side 1		; 1
eq1_loop:
	jmp y-- eq1_loop		side 2	[1]	;63=1+(1+30)*([1]+1)
	jmp pin check_fifo		side 2		;64
	nop						side 2	[2]	;--(67)
	jmp check_fifo			side 1	[2]	;--(70)

% c-sdk {
#include "hardware/clocks.h"
static inline void pio_pwm_program_init(PIO pio, uint pin_output_lp, uint pin_output_rp, uint pin_fs48) {
	gpio_init(pin_fs48);
	gpio_set_dir(pin_fs48, GPIO_OUT);
	gpio_put(pin_fs48, 0);	// PIN_FS48=L(Default:44k)

	pio_clear_instruction_memory(pio);

	uint offset = pio_add_program(pio, &pio_pwm_5bit_program);	// add pioasm

	for(uint sm = 0; sm < 2; sm++){
		uint pin = (sm == 0) ? pin_output_lp:pin_output_rp;	// sm=0:LP,1:RP
		pio_gpio_init(pio, pin);							// GPIOn   for positive pin
		pio_gpio_init(pio, pin + 1);						// GPIOn+1 for negative pin
		pio_sm_set_consecutive_pindirs(pio,sm,pin,2,true);	// pin_base = pin, pin_count = 2, output 
		pio_sm_config c = pio_pwm_5bit_program_get_default_config(offset);	// get default value
		sm_config_set_out_shift(&c,true ,true , 20);		// osr : shift right, autopull, thr=20 
//		sm_config_set_in_shift(&c, false,false, 20);		// isr : shift left,  no autopush, thr=20
		sm_config_set_sideset_pins(&c, pin);				// for 'side' pins, base=pin_p
		sm_config_set_sideset(&c, 2, false, false);			// use 2-sideset, no msb flag, no direction pin
		sm_config_set_jmp_pin(&c, pin_fs48);				// for jmp pin command
		sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);		// Deeper FIFO as we're not doing any RX
		sm_config_set_clkdiv_int_frac(&c, 1, 0);			// div ratio = 1.0 (no divide, clk = 208.8MHz)
		pio_sm_init(pio, sm, offset, &c);					// sm config & go to the start address
		pio_sm_clear_fifos(pio, sm);						// flush remain fifo audio data(s)
	}
	pio_enable_sm_mask_in_sync(pio, 3);						// synchronized start sm0 & sm1
}
%}
